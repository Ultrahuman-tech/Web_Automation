name: Ring Tests

on:
  # Schedule: daily at 8:00 AM IST (02:30 UTC)
  schedule:
    - cron: '30 3 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Run with BOTH json and html reporters so we can parse counts and still have a nice report.
      - name: Run Ring Tests
        id: run_tests
        continue-on-error: true            # don't stop the job on test failures
        run: |
          mkdir -p test-results
          npx playwright test tests/ring/ --reporter=json,html > test-results/results.json

      # Parse results.json and expose counts as step outputs (no env vars -> no VS Code warnings)
      - name: Parse Test Results
        id: parse
        if: always()
        shell: bash
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const out = process.env.GITHUB_OUTPUT;
          const p = 'test-results/results.json';

          let passed = 0, failed = 0, skipped = 0, total = 0;

          function countFromSuite(suite) {
            if (suite.specs) {
              for (const spec of suite.specs) {
                for (const t of (spec.tests || [])) {
                  total++;
                  // Use the latest result for each test attempt
                  const last = (t.results && t.results.length) ? t.results[t.results.length - 1] : null;
                  const status = (last && last.status) || t.outcome || t.status || 'unknown';
                  if (status === 'passed') passed++;
                  else if (status === 'failed' || status === 'timedOut') failed++;
                  else skipped++;
                }
              }
            }
            if (suite.suites) suite.suites.forEach(countFromSuite);
          }

          if (fs.existsSync(p)) {
            try {
              const data = JSON.parse(fs.readFileSync(p, 'utf8'));
              if (Array.isArray(data.suites)) data.suites.forEach(countFromSuite);
            } catch (e) {
              // leave zeros if parse fails
            }
          }
          const anyFailed = failed > 0 ? 'true' : 'false';

          // Emit outputs
          fs.appendFileSync(out, `TESTS_PASSED=${passed}\n`);
          fs.appendFileSync(out, `TESTS_FAILED_COUNT=${failed}\n`);
          fs.appendFileSync(out, `TESTS_SKIPPED=${skipped}\n`);
          fs.appendFileSync(out, `TESTS_TOTAL=${total}\n`);
          fs.appendFileSync(out, `ANY_FAILED=${anyFailed}\n`);
          NODE

      - name: Upload HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üß™ *Ring Tests Summary*\n\
              ‚Ä¢ Branch: `${{ github.ref_name }}`\n\
              ‚Ä¢ By: `${{ github.actor }}`\n\n\
              ‚úÖ Passed: ${{ steps.parse.outputs.TESTS_PASSED }}\n\
              ‚ùå Failed: ${{ steps.parse.outputs.TESTS_FAILED_COUNT }}\n\
              ‚ö™ Skipped: ${{ steps.parse.outputs.TESTS_SKIPPED }}\n\
              üìä Total: ${{ steps.parse.outputs.TESTS_TOTAL }}\n\n\
              üîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Report>\n\n\
              ${{ steps.parse.outputs.ANY_FAILED == 'true' && ':x: Some tests failed!' || ':white_check_mark: All tests passed!' }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          